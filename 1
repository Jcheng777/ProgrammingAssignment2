
#makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse
# * set     set the value of  matrix
# * get     get the value of  matrix
# * cacheInv   get the cahced value (inverse of the matrix)
# * getInv     get the cahced value (inverse of the matrix)
#

# makeCacheMatrix function
makeCacheMatrix <- function(x = numeric()) {
  
  
  # Cache value,initially nothing is cached so set it to NULL
  cache <- NULL
  
  # store a input matrix
  set <- function(inputValue) {
    x <<- inputValue
    cache <<- NULL
  }
  
  # returns the stored matrix
  get <- function() {
    x
  }
  
  # cache the value
  cacheInv <- function(sol) {
    cache <<- sol
  }
  
  # get the cached value
  getInv <- function() {
    cache
  }
  
  # return a list
  list(set = set, get = get, cacheInv = cacheInv, getInv = getInv)
}


#  function gets the inverse of  matrix 
# makeCacheMatrix
cacheSolve <- function(y, ...) {
  # get the cached value
  inv <- y$getInv()
  # if  return cache if exists
  if(!is.null(inv)) {
    message("got cached data")
    return(inv)
  }
  #  got the inverse and store it in
  # the cache
  dat <- y$get()
  inv <- solve(dat)
  y$cacheInv(inv)
  
  # return the inverse
  inv
}

